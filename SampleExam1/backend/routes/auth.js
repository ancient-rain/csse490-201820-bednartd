import mongoose from 'mongoose';
var User = mongoose.model('User');

var sendJSONresponse = (res, status, content) => {
    res.status(status);
    res.json(content);
};

module.exports.register = (req, res) => {
    //  TODO: allow users to register so they can access protected routes.
    //  Be sure to check all required fields, verify that username is 
    //  unique (send 409 http status code if not).
    //  Send 404 http status code if saving registered user errors out.
    //  A registered user should receive a JWT generated by model/users.js
    const user = new User({
        username: req.body.username,
        first: req.body.first,
        last: req.body.last
    });

    user.setPassword(req.body.password);
    
    const token = user.generateJwt();

    user.save(err => {
        if (err) {
            if (err.code == 11000) {
                sendJSONresponse(res, 409, {
                    "message": "Username already exists!"
                });
            }
            sendJSONresponse(res, 404, {
                "message": "User could not be saved."
            });
        } else {
            sendJSONresponse(res, 200, {
                "message": "User saved successfully!",
                "token": token
            });
        }
    });
};

module.exports.login =  (req, res) => {
    //  TODO: allow registered users to login to access proteted routes.
    //  Be sure to check error cases and return 404/401 http status codes, 
    //  as appropriate. A logged in user should receive a JWT generated 
    //  by model/users.js
    console.log(req.body);
    User.findOne({
        username: req.body.username
    }, (err, user) => {
        if (err) {
            sendJSONresponse(res, 401, {
                "message": "Error logging in!"
            });
        } else if (!user) {
            console.log(user);
            sendJSONresponse(res, 404, {
                "message": "Authentication failed, no user"
            });
        } else if (user) {
            if (user.validPassword(req.body.password)) {
                sendJSONresponse(res, 403, {
                    "message": "Authentication failed, wrong password"
                });
            } else {
                const payload = {
                    first: user.first,
                    last: user.last
                };
                user.generateJwt();
                sendJSONresponse(res, 200, {
                    "message": "Authentication successful!",
                    "token": token
                });
            }
        }
    });
};